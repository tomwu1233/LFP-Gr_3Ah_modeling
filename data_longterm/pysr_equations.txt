Best equation for q4_breakin:
PySRRegressor.equations_ = [
	    pick     score                                           equation      loss  complexity
	0         0.000000                                         0.08675787  0.002503           1
	1         0.026726                                  x3 * 0.0022762308  0.002373           3
	2         0.540118                               0.15354483 / exp(x0)  0.001383           4
	3         0.000053                     (0.35754246 ^ x0) * 0.15545419  0.001383           5
	4         0.029578                          exp(x1 - x0) * 0.09220266  0.001342           6
	5         0.260127             ((x1 + -0.24878268) ^ x0) * 0.18444777  0.001035           7
	6         0.047083                 x1 / exp(x0 + exp(x1 ^ 2.9876869))  0.000942           9
	7         0.803236  (x1 + -0.24318354) / (((x1 + x0) ^ 3.8764114) ...  0.000189          11
	8         0.154297  ((x1 * 0.20782651) + -0.044357575) / (x0 + ((x...  0.000139          13
	9         0.183676  (x1 + -0.24181883) / ((((x0 + x1) ^ 3.8089502)...  0.000115          14
	10        0.502750  ((x1 + -0.2156081) / (x0 + (((x1 ^ x2) ^ 5.396...  0.000070          15
	11        0.324061  ((x1 + -0.2229071) / (((x1 ^ 5.3348913) + ((x0...  0.000037          17
	12        0.024950  (x1 + -0.22223401) * (0.21636418 / (((((x0 ^ x...  0.000035          19
	13        0.111118  ((x1 + -0.21884419) / (((((x0 ^ x2) ^ 2.294156...  0.000028          21
	14        0.048891  ((x1 + -0.20732582) * (0.2550351 / ((3.3962176...  0.000025          23
	15        0.187362  (x1 + -0.22159468) * (0.22095808 / ((x3 * (exp...  0.000021          24
	16        0.070528  (0.22414798 / ((((exp(x3) ^ -0.18118593) * x3)...  0.000018          26
	17        0.018769  ((x1 + -0.21911253) / ((((x3 / x2) + -2.978748...  0.000018          28
	18  >>>>  0.138570  ((-0.21911253 + x1) / (((x3 / (x2 + (x0 ^ x3))...  0.000013          30
]

Best equation for a_long:
PySRRegressor.equations_ = [
	    pick     score                                           equation      loss  complexity
	0         0.000000                                         0.09786796  0.000898           1
	1         0.149171                                    x2 * 0.10456534  0.000666           3
	2         0.428636                              exp(x2) * 0.037741818  0.000434           4
	3         0.273992                              (x2 ^ x2) * 0.0990516  0.000330           5
	4         0.040687        0.07537018 - (exp(exp(x2)) * -0.0012947366)  0.000304           7
	5         0.007399            (exp(x2 * x2) / 74.69641) + 0.060435914  0.000302           8
	6         0.253677                    (x1 / exp(exp(x1))) * (x2 ^ x2)  0.000234           9
	7         0.120459          ((0.909509 - x1) * ((x2 ^ x2) * x1)) * x1  0.000184          11
	8         0.044431  (0.88811153 - x1) * ((x1 * (x1 * (x2 ^ x2))) -...  0.000168          13
	9         0.039710  x1 * (((x2 ^ x2) * 0.3185805) * exp((x3 ^ -0.3...  0.000156          15
	10        0.059271  exp(((x3 ^ -0.2685654) / x1) / log(x1)) * (x1 ...  0.000138          17
	11        0.012765  exp(((x3 ^ -0.26515922) / x1) / log(x1)) * (((...  0.000135          19
	12        0.034253  x1 * (exp((x2 ^ 2.1303544) * (x3 * 0.010076662...  0.000130          20
	13        0.013462  (((x1 * x1) / exp(x2 * ((x2 * x3) * -0.0112421...  0.000127          22
	14        0.023840  (exp(exp(x1) * (x1 / -0.6580403)) * (exp((((x2...  0.000124          23
	15        0.424458  exp((x1 / -0.6692166) * exp(x1)) * (x1 * (x1 *...  0.000081          24
	16        0.186467  log(exp((x1 / -0.6289984) * exp(x1)) * (((x1 *...  0.000067          25
	17  >>>>  0.314258  log(exp(exp(x1) * (x1 / -0.6289984)) * (((x1 *...  0.000049          26
	18        0.077340  log((((x1 * ((exp(x2 * 3.1920388) + x3) - exp(...  0.000042          28
	19        0.017649  log(((((exp(x2 * 3.154447) + (x3 - exp(0.16239...  0.000041          29
	20        0.111923  log(exp((exp(x1) * x1) / -0.63943034) * (((((x...  0.000037          30
]
